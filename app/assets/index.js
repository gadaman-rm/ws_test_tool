var a=Object.defineProperty;var d=(o,e,t)=>e in o?a(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var n=(o,e,t)=>d(o,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))c(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&c(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function c(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();class u{constructor(){n(this,"socket",null);n(this,"messages",[]);n(this,"addressInput");n(this,"portInput");n(this,"connectBtn");n(this,"statusText");n(this,"statusIndicator");n(this,"messageInput");n(this,"sendBtn");n(this,"sentMessages");n(this,"receivedMessages");this.addressInput=document.getElementById("address-input"),this.portInput=document.getElementById("port-input"),this.connectBtn=document.getElementById("connect-btn"),this.statusText=document.getElementById("status-text"),this.statusIndicator=document.getElementById("status-indicator"),this.messageInput=document.getElementById("message-input"),this.sendBtn=document.getElementById("send-btn"),this.sentMessages=document.getElementById("sent-messages"),this.receivedMessages=document.getElementById("received-messages"),this.initializeEventListeners()}initializeEventListeners(){this.connectBtn.addEventListener("click",()=>this.toggleConnection()),this.sendBtn.addEventListener("click",()=>this.sendMessage()),this.messageInput.addEventListener("input",()=>this.prettifyJSON())}toggleConnection(){this.socket&&this.socket.readyState===WebSocket.OPEN?this.disconnect():this.connect()}connect(){const e=this.addressInput.value.trim(),t=this.portInput.value.trim();if(!e||!t){alert("Please enter both address and port.");return}const c=`${e}:${t}`;try{this.socket=new WebSocket(c),this.setupWebSocketEvents(),this.updateUIConnected()}catch{alert("Invalid WebSocket URL.")}}disconnect(){this.socket&&(this.socket.close(),this.socket=null,this.updateUIDisconnected())}setupWebSocketEvents(){this.socket&&(this.socket.onopen=()=>{this.statusText.textContent="Connected",this.statusIndicator.classList.remove("disconnected"),this.statusIndicator.classList.add("connected"),this.connectBtn.textContent="Disconnect",this.connectBtn.classList.add("connected")},this.socket.onmessage=e=>{const t={content:this.formatMessage(e.data),timestamp:new Date().toLocaleString(),type:"received"};this.messages.push(t),this.renderMessages(),this.scrollToBottom(this.receivedMessages)},this.socket.onclose=()=>{this.updateUIDisconnected()},this.socket.onerror=()=>{alert("WebSocket error occurred."),this.disconnect()})}updateUIConnected(){this.statusText.textContent="Connecting...",this.connectBtn.disabled=!0}updateUIDisconnected(){this.statusText.textContent="Disconnected",this.statusIndicator.classList.remove("connected"),this.statusIndicator.classList.add("disconnected"),this.connectBtn.textContent="Connect",this.connectBtn.classList.remove("connected"),this.connectBtn.disabled=!1}sendMessage(){if(!this.socket||this.socket.readyState!==WebSocket.OPEN){alert("Not connected to WebSocket.");return}const e=this.messageInput.value.trim();if(!e)return;this.socket.send(e);const t={content:this.formatMessage(e),timestamp:new Date().toLocaleString(),type:"sent"};this.messages.push(t),this.renderMessages(),this.messageInput.value="",this.scrollToBottom(this.sentMessages)}prettifyJSON(){const e=this.messageInput.value.trim();if(e)try{const t=JSON.parse(e);this.messageInput.value=JSON.stringify(t,null,2)}catch{}}formatMessage(e){try{if(typeof e=="string"){const t=JSON.parse(e);return JSON.stringify(t,null,2)}return JSON.stringify(e,null,2)}catch{return String(e)}}renderMessages(){this.sentMessages.innerHTML="",this.receivedMessages.innerHTML="",this.messages.forEach(e=>{const t=document.createElement("div");t.classList.add("message-item"),t.innerHTML=`
        <div class="timestamp">${e.timestamp}</div>
        <pre>${e.content}</pre>
      `,e.type==="sent"?this.sentMessages.appendChild(t):this.receivedMessages.appendChild(t)})}scrollToBottom(e){e.scrollTop=e.scrollHeight}}document.addEventListener("DOMContentLoaded",()=>{new u});
